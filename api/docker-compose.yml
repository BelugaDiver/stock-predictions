version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: stock-api-postgres
    environment:
      POSTGRES_DB: stock_predictions
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-admin}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - stock-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Stock Prediction API
  stock-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: stock-api
    environment:
      # Database
      POSTGRES_SERVER: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-admin}
      POSTGRES_DB: stock_predictions
      POSTGRES_PORT: 5432
      
      # OpenTelemetry
      JAEGER_ENDPOINT: http://jaeger:4318/v1/traces
      PROMETHEUS_PORT: 8001
      OTEL_CONSOLE_EXPORT: "false"
      OTEL_SERVICE_NAME: stock-prediction-api
      OTEL_SERVICE_VERSION: 1.0.0
      
      # API Settings
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-key-change-in-production}
      ENVIRONMENT: production
    ports:
      - "8000:8000"  # API
      - "8001:8001"  # Metrics
    depends_on:
      postgres:
        condition: service_healthy
      jaeger:
        condition: service_started
    networks:
      - stock-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Jaeger - Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.51
    container_name: stock-api-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector (legacy)
      - "14250:14250"  # gRPC collector
      - "4317:4317"    # OTLP gRPC receiver
      - "4318:4318"    # OTLP HTTP receiver
      - "9411:9411"    # Zipkin collector
    networks:
      - stock-network
    restart: unless-stopped

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: stock-api-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    depends_on:
      - stock-api
    networks:
      - stock-network
    restart: unless-stopped

  # Grafana - Metrics Visualization
  grafana:
    image: grafana/grafana:10.2.2
    container_name: stock-api-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ADMIN_USER=admin
    ports:
      - "4000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - stock-network
    restart: unless-stopped

  # Redis - Caching (Optional)
  redis:
    image: redis:7-alpine
    container_name: stock-api-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - stock-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Nginx - Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: stock-api-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - stock-api
    networks:
      - stock-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  redis_data:
    driver: local

networks:
  stock-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
